

#load("coordinates.py")
#load("variety.py")
#load("monomial.py")
#load("polynomial.py")
#load("plucker_relations.py")
#load("tinvariants.py")
load("classes/straighten.py")

def chose3(n,lb=None,ub=None):
    def f():
        for i in range(lb[0]-1,ub[0]):
            for j in range(max(lb[1]-1,i+1),ub[1]):
                for k in range(max(lb[2]-1,j+1),ub[2]):
                    yield [i+1,j+1,k+1]
    if lb == None:
        lb = [1,2,3]
    if ub == None:
        ub = [n-2,n-1,n]
    return [c for c in f()]

p32 = [TableauColumn(x) for x in chose3(5)]
p32 = p32 + [TableauColumn(x) for x in [[i,j] for i in range(1,6) for j in range(i+1,6)]]

FV32 = FlagVariety([3,2],5,p32)


T = [TableauMonomial(FV32,1,coords=t.conjugate()) for t in SemistandardTableaux([4,4,2],[2,2,2,2,2])]
T2 = [(T[i]*T[j],i,j) for i in range(len(T)) for j in range(i,len(T))] 
nc = list(filter((lambda z:True if z[0].get_nc_pair()!=None else False),T2))
Algos = list(map((lambda z:(StraightenAlgo(z[0]),z[1],z[2])),nc))

for S in Algos: S[0].straighten()  
for S in Algos: S[0].print_steps()  


#latex
T_latex = list(map((lambda z:"t_{"+str(i)+"}"),range(len(T))))
T2_latex = list(map((lambda z:"t_{"+str(z[1])+"}t_{"+str(z[2])+"}"),T2))

rel_latex = []
for S in Algos:
    lateex = "t_{"+str(S[1])+"}t_{"+str(S[2])+"} &= "
    poly = S[0].poly
    cnt = 0
    for term in poly:
        flag = False
        cnt = cnt+1
        if cnt%11 == 0:
            lateex = lateex + "\\\\\n&"
        #ccc = 0
        for i in range(len(T2)):
            if T2[i][0].vec == term.vec:
                flag = True
                sign=" + "
                coef=""
                if term.coef < 0:
                    sign = " - "
                if abs(term.coef)!=1:
                    coef=str(abs(term.coef))
                lateex = lateex + sign + coef + T2_latex[i] 
                #ccc = ccc+1
                break
        #print(ccc)
        if flag == False:
            lateex = lateex + "error"
            break
    
    rel_latex.append(lateex+"\\\\\n")

done = [False]*len(T2)

for i in range(len(T2)):
    if done[i]:
        continue
    
    done[i]=True
    S = T2[i]
    flag = False
    lateex = "t_{"+str(S[1])+"}t_{"+str(S[2])+"} & "
    term = S[0]

    for j in range(i+1,len(T2)):
        if T2[j][0].vec == term.vec:
            lateex = lateex + " = " + T2_latex[j]
            done[j] = True
            flag = True
    if flag:
        rel_latex.append(lateex+"\\\\\n")

f = open("rel.tex","w")
f.writelines(rel_latex)
f.close()



    


